import React, { useState, useEffect, useMemo } from "react";
import {
  Box,
  Container,
  VStack,
  HStack,
  Text,
  Button,
  Card,
  CardBody,
  Flex,
  useToast,
  Spinner,
  Center,
  useDisclosure,
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
  Icon,
  Badge,
  Stat,
  StatLabel,
  StatNumber,
  StatHelpText,
  StatGroup,
  Grid,
  GridItem,
  useColorModeValue,
} from "@chakra-ui/react";
import {
  IoPersonAddOutline,
  IoDownloadOutline,
  IoStatsChartOutline,
  IoArrowBackOutline,
  IoPersonOutline,
  IoCashOutline,
  IoStar,
  IoTrendingUpOutline,
} from "react-icons/io5";
import {
  Customer,
  CustomerStats,
  CustomerTransaction,
  CustomerActivity,
  CustomerFormData,
  MembershipType,
} from "@shopflow/types";
import CustomerList from "../../components/customers/CustomerList";
import CustomerForm from "../../components/customers/CustomerForm";
import CustomerDetail from "../../components/customers/CustomerDetail";
import { POSLayout } from "../../components";
import { formatCurrency } from "../../lib/sales";

// Mock data for development
// Mock membership types for development
const mockMembershipTypes: MembershipType[] = [
  {
    id: "1",
    name: "Gold",
    color: "yellow",
    benefits: ["ส่วนลด 10%", "แต้มสะสม x2"],
    minSpent: 50000,
    discountPercentage: 10,
    pointsMultiplier: 2,
    description: "สมาชิกระดับทอง",
    isActive: true,
    createdAt: new Date(),
    updatedAt: new Date(),
  },
  {
    id: "2",
    name: "Silver",
    color: "gray",
    benefits: ["ส่วนลด 5%", "แต้มสะสม x1.5"],
    minSpent: 25000,
    discountPercentage: 5,
    pointsMultiplier: 1.5,
    description: "สมาชิกระดับเงิน",
    isActive: true,
    createdAt: new Date(),
    updatedAt: new Date(),
  },
];

const mockCustomers: Customer[] = [
  {
    id: "1",
    customerNumber: "C001",
    name: "สมชาย ใจดี",
    email: "somchai@email.com",
    phone: "0812345678",
    address: "123 ถนนสุขุมวิท กรุงเทพฯ 10110",
    dateOfBirth: new Date("1985-05-15"),
    isActive: true,
    membership: {
      id: "1",
      customerId: "1",
      membershipType: mockMembershipTypes[0],
      membershipNumber: "M0001",
      points: 1250,
      totalSpent: 75000,
      discountPercentage: 10,
      joinedAt: new Date("2023-01-15"),
      status: "active",
      expiresAt: new Date("2024-12-31"),
    },
    notes: "ลูกค้า VIP ชอบสินค้าคุณภาพดี",
    createdAt: new Date("2023-01-15"),
    updatedAt: new Date("2024-01-10"),
  },
  {
    id: "2",
    customerNumber: "C002",
    name: "สมหญิง รักสวย",
    email: "somying@email.com",
    phone: "0812345679",
    isActive: true,
    membership: {
      id: "2",
      customerId: "2",
      membershipType: mockMembershipTypes[1],
      membershipNumber: "M0002",
      points: 800,
      totalSpent: 35000,
      discountPercentage: 5,
      joinedAt: new Date("2023-03-20"),
      status: "active",
      expiresAt: new Date("2024-12-31"),
    },
    createdAt: new Date("2023-03-20"),
    updatedAt: new Date("2024-01-08"),
  },
  {
    id: "3",
    customerNumber: "C003",
    name: "อนุชา ทำงานหนัก",
    email: "anucha@email.com",
    phone: "0812345680",
    isActive: true,
    createdAt: new Date("2023-06-10"),
    updatedAt: new Date("2024-01-05"),
  },
];

const mockStats: CustomerStats = {
  customerId: "1",
  totalOrders: 25,
  totalSpent: 75000,
  averageOrderValue: 3000,
  lastPurchaseDate: new Date("2024-01-10"),
  firstPurchaseDate: new Date("2023-01-20"),
  favoriteProducts: [
    {
      productId: "P001",
      productName: "เสื้อยืดคุณภาพดี",
      purchaseCount: 5,
      totalAmount: 2500,
    },
    {
      productId: "P002",
      productName: "กางเกงยีนส์",
      purchaseCount: 3,
      totalAmount: 4500,
    },
  ],
  monthlySpending: [
    {
      month: "2024-01",
      amount: 3500,
      orders: 1,
    },
    {
      month: "2023-12",
      amount: 5000,
      orders: 2,
    },
  ],
  pointsBalance: 1250,
  membershipStatus: {
    currentType: "Gold",
    nextType: "Platinum",
    progressToNext: 75,
  },
};

const mockTransactions: CustomerTransaction[] = [
  {
    id: "1",
    customerId: "1",
    type: "purchase",
    amount: 3500,
    description: "ซื้อเสื้อยืด 2 ตัว + กางเกงยีนส์ 1 ตัว",
    pointsEarned: 70,
    createdAt: new Date("2024-01-10"),
  },
  {
    id: "2",
    customerId: "1",
    type: "points_redeem",
    amount: 500,
    description: "ใช้แต้มแลกส่วนลด",
    pointsRedeemed: 100,
    createdAt: new Date("2024-01-05"),
  },
];

const mockActivities: CustomerActivity[] = [
  {
    id: "1",
    customerId: "1",
    type: "purchase",
    title: "ซื้อสินค้า",
    description: "ซื้อเสื้อยืด 2 ตัว มูลค่า ฿3,500",
    createdAt: new Date("2024-01-10"),
  },
  {
    id: "2",
    customerId: "1",
    type: "points_activity",
    title: "ได้รับแต้ม",
    description: "ได้รับแต้ม 70 แต้มจากการซื้อสินค้า",
    createdAt: new Date("2024-01-10"),
  },
];

type ViewMode = "list" | "detail";

const CustomersPage: React.FC = () => {
  const [customers, setCustomers] = useState<Customer[]>(mockCustomers);
  const [selectedCustomer, setSelectedCustomer] = useState<Customer | null>(
    null
  );
  const [viewMode, setViewMode] = useState<ViewMode>("list");
  const [isLoading, setIsLoading] = useState(false);
  const [editingCustomer, setEditingCustomer] = useState<Customer | null>(null);

  const {
    isOpen: isFormOpen,
    onOpen: onFormOpen,
    onClose: onFormClose,
  } = useDisclosure();
  const toast = useToast();

  // Calculate overview statistics
  const overviewStats = useMemo(() => {
    const totalCustomers = customers.length;
    const activeCustomers = customers.filter((c) => c.isActive).length;
    const totalRevenue = customers.reduce(
      (sum, c) => sum + (c.membership?.totalSpent || 0),
      0
    );
    const averageSpending = totalRevenue / totalCustomers || 0;
    const membersCount = customers.filter((c) => c.membership).length;

    return {
      totalCustomers,
      activeCustomers,
      totalRevenue,
      averageSpending,
      membersCount,
    };
  }, [customers]);

  const handleAddCustomer = () => {
    setEditingCustomer(null);
    onFormOpen();
  };

  const handleEditCustomer = (customer: Customer) => {
    setEditingCustomer(customer);
    onFormOpen();
  };

  const handleDeleteCustomer = (customerId: string) => {
    setCustomers((prev) => prev.filter((c) => c.id !== customerId));
    if (selectedCustomer?.id === customerId) {
      setViewMode("list");
      setSelectedCustomer(null);
    }
  };

  const handleCustomerSave = async (customerData: CustomerFormData) => {
    try {
      if (editingCustomer) {
        // Update existing customer
        setCustomers((prev) =>
          prev.map((c) =>
            c.id === editingCustomer.id
              ? {
                  ...c,
                  name: customerData.name,
                  phone: customerData.phone,
                  email: customerData.email,
                  address: customerData.address,
                  dateOfBirth: customerData.dateOfBirth,
                  gender: customerData.gender,
                  notes: customerData.notes,
                  updatedAt: new Date(),
                }
              : c
          )
        );
        toast({
          title: "อัปเดตข้อมูลลูกค้าสำเร็จ",
          description: `ข้อมูลลูกค้า ${customerData.name} ได้รับการอัปเดตแล้ว`,
          status: "success",
          duration: 3000,
          isClosable: true,
        });
      } else {
        // Add new customer
        const membershipType = customerData.membershipType
          ? mockMembershipTypes.find(
              (mt) => mt.id === customerData.membershipType
            )
          : undefined;

        const newCustomer: Customer = {
          id: Date.now().toString(),
          customerNumber: `C${String(customers.length + 1).padStart(3, "0")}`,
          name: customerData.name,
          phone: customerData.phone,
          email: customerData.email,
          address: customerData.address,
          dateOfBirth: customerData.dateOfBirth,
          gender: customerData.gender,
          notes: customerData.notes,
          isActive: true,
          createdAt: new Date(),
          updatedAt: new Date(),
        };

        if (membershipType) {
          newCustomer.membership = {
            id: Date.now().toString(),
            customerId: newCustomer.id,
            membershipType: membershipType,
            membershipNumber: `M${String(customers.length + 1).padStart(
              4,
              "0"
            )}`,
            points: 0,
            totalSpent: 0,
            discountPercentage: membershipType.discountPercentage,
            joinedAt: new Date(),
            status: "active",
          };
        }

        setCustomers((prev) => [newCustomer, ...prev]);
        toast({
          title: "เพิ่มลูกค้าสำเร็จ",
          description: `เพิ่มลูกค้า ${customerData.name} แล้ว`,
          status: "success",
          duration: 3000,
          isClosable: true,
        });
      }
      onFormClose();
    } catch (error) {
      toast({
        title: "เกิดข้อผิดพลาด",
        description: "ไม่สามารถบันทึกข้อมูลลูกค้าได้",
        status: "error",
        duration: 3000,
        isClosable: true,
      });
    }
  };

  const handleCustomerSelect = (customer: Customer) => {
    setSelectedCustomer(customer);
    setViewMode("detail");
  };

  const handleBackToList = () => {
    setSelectedCustomer(null);
    setViewMode("list");
  };

  const handleExportCustomers = () => {
    // Mock export functionality
    toast({
      title: "กำลังส่งออกข้อมูล",
      description: "ระบบกำลังเตรียมไฟล์ Excel สำหรับดาวน์โหลด",
      status: "info",
      duration: 3000,
      isClosable: true,
    });
  };

  // Style values
  const bgGradient = useColorModeValue(
    "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
    "linear-gradient(135deg, #2d3748 0%, #1a202c 100%)"
  );
  const cardBg = useColorModeValue("white", "gray.800");
  const borderColor = useColorModeValue("gray.200", "gray.600");

  return (
    <POSLayout>
      <Box as="main" minH="100vh" bg={useColorModeValue("gray.50", "gray.900")} pt={6} pb={10}>
        <Container maxW="7xl">
          {/* Breadcrumb */}
          <Breadcrumb mb={4}>
            <BreadcrumbItem>
              <BreadcrumbLink href="/">หน้าแรก</BreadcrumbLink>
            </BreadcrumbItem>
            <BreadcrumbItem>
              <BreadcrumbLink href="/customers">จัดการลูกค้า</BreadcrumbLink>
            </BreadcrumbItem>
            {viewMode === "detail" && selectedCustomer && (
              <BreadcrumbItem isCurrentPage>
                <BreadcrumbLink>{selectedCustomer.name}</BreadcrumbLink>
              </BreadcrumbItem>
            )}
          </Breadcrumb>

          {/* Header */}
          <HStack justify="space-between" align="center">
            <HStack spacing={4}>
              {viewMode === "detail" && (
                <Button
                  leftIcon={<Icon as={IoArrowBackOutline} />}
                  variant="ghost"
                  onClick={handleBackToList}
                >
                  กลับ
                </Button>
              )}
              <VStack align="start" spacing={1}>
                <Text fontSize="3xl" fontWeight="bold">
                  {viewMode === "detail" && selectedCustomer
                    ? `ข้อมูลลูกค้า: ${selectedCustomer.name}`
                    : "จัดการลูกค้า"}
                </Text>
                <Text color="gray.500">
                  {viewMode === "detail"
                    ? "รายละเอียดและประวัติการซื้อของลูกค้า"
                    : "รายชื่อลูกค้าและการจัดการข้อมูล"}
                </Text>
              </VStack>
            </HStack>

            <HStack spacing={3}>
              {viewMode === "list" && (
                <>
                  <Button
                    leftIcon={<Icon as={IoDownloadOutline} />}
                    variant="outline"
                    onClick={handleExportCustomers}
                  >
                    ส่งออกข้อมูล
                  </Button>
                  <Button
                    leftIcon={<Icon as={IoPersonAddOutline} />}
                    colorScheme="blue"
                    onClick={handleAddCustomer}
                  >
                    เพิ่มลูกค้า
                  </Button>
                </>
              )}
              {viewMode === "detail" && selectedCustomer && (
                <Button
                  leftIcon={<Icon as={IoPersonAddOutline} />}
                  colorScheme="blue"
                  onClick={() => handleEditCustomer(selectedCustomer)}
                >
                  แก้ไขข้อมูล
                </Button>
              )}
            </HStack>
          </HStack>

          {/* Overview Statistics (only in list view) */}
          {viewMode === "list" && (
            <Card>
              <CardBody>
                <StatGroup>
                  <Stat>
                    <StatLabel>
                      <HStack>
                        <Icon as={IoPersonOutline} />
                        <Text>ลูกค้าทั้งหมด</Text>
                      </HStack>
                    </StatLabel>
                    <StatNumber color="blue.500">
                      {overviewStats.totalCustomers.toLocaleString()}
                    </StatNumber>
                    <StatHelpText>
                      <HStack>
                        <Text>ใช้งาน:</Text>
                        <Badge colorScheme="green">
                          {overviewStats.activeCustomers}
                        </Badge>
                      </HStack>
                    </StatHelpText>
                  </Stat>

                  <Stat>
                    <StatLabel>
                      <HStack>
                        <Icon as={IoCashOutline} />
                        <Text>ยอดขายรวม</Text>
                      </HStack>
                    </StatLabel>
                    <StatNumber color="green.500">
                      {formatCurrency(overviewStats.totalRevenue)}
                    </StatNumber>
                    <StatHelpText>จากลูกค้าทั้งหมด</StatHelpText>
                  </Stat>

                  <Stat>
                    <StatLabel>
                      <HStack>
                        <Icon as={IoTrendingUpOutline} />
                        <Text>ยอดเฉลี่ยต่อคน</Text>
                      </HStack>
                    </StatLabel>
                    <StatNumber color="purple.500">
                      {formatCurrency(overviewStats.averageSpending)}
                    </StatNumber>
                    <StatHelpText>ค่าเฉลี่ยการซื้อ</StatHelpText>
                  </Stat>

                  <Stat>
                    <StatLabel>
                      <HStack>
                        <Icon as={IoStar} />
                        <Text>สมาชิก</Text>
                      </HStack>
                    </StatLabel>
                    <StatNumber color="orange.500">
                      {overviewStats.membersCount.toLocaleString()}
                    </StatNumber>
                    <StatHelpText>
                      {(
                        (overviewStats.membersCount /
                          overviewStats.totalCustomers) *
                        100
                      ).toFixed(1)}
                      % ของทั้งหมด
                    </StatHelpText>
                  </Stat>
                </StatGroup>
              </CardBody>
            </Card>
          )}

          {/* Main Content */}
          {isLoading ? (
            <Center py={20}>
              <VStack spacing={4}>
                <Spinner size="xl" color="blue.500" />
                <Text>กำลังโหลดข้อมูลลูกค้า...</Text>
              </VStack>
            </Center>
          ) : (
            <>
              {viewMode === "list" && (
                <CustomerList
                  customers={customers}
                  onCustomerSelect={handleCustomerSelect}
                  onCustomerEdit={handleEditCustomer}
                  onCustomerDelete={handleDeleteCustomer}
                  showActions={true}
                />
              )}

              {viewMode === "detail" && selectedCustomer && (
                <CustomerDetail
                  customer={selectedCustomer}
                  stats={mockStats}
                  transactions={mockTransactions}
                  activities={mockActivities}
                  onEdit={() => handleEditCustomer(selectedCustomer)}
                  onDelete={() => handleDeleteCustomer(selectedCustomer.id)}
                  onAddTransaction={() => {
                    toast({
                      title: "Feature Coming Soon",
                      description: "การเพิ่มธุรกรรมโดยตรงจะเปิดให้ใช้ในอนาคต",
                      status: "info",
                      duration: 3000,
                      isClosable: true,
                    });
                  }}
                  showActions={true}
                />
              )}
            </>
          )}
        </VStack>

        {/* Customer Form Modal */}
        <CustomerForm
          isOpen={isFormOpen}
          onClose={onFormClose}
          customer={editingCustomer}
          membershipTypes={mockMembershipTypes}
          onSave={handleCustomerSave}
          mode={editingCustomer ? "edit" : "create"}
        />
          </VStack>
        </Container>
      </Box>
    </POSLayout>
  );
};

export default CustomersPage;
